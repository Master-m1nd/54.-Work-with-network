{"ast":null,"code":"import { PopUpComponent } from '../pop-up/pop-up.component';\nimport * as i0 from \"@angular/core\";\nexport class UsersService {\n  constructor(componentFactoryResolver) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.groupName = 'Healthy lifestyle';\n    this.users = [{\n      name: \"Mike\",\n      status: \"I'm learning angular\",\n      url: \"https://i.pravatar.cc/150?img=12\",\n      id: 1\n    }, {\n      name: \"Nikola\",\n      status: \"Playing piano\",\n      url: \"https://i.pravatar.cc/150?img=7\",\n      id: 2\n    }, {\n      name: \"Bob\",\n      status: \"Translations from Chinese\",\n      url: \"https://i.pravatar.cc/150?img=11\",\n      id: 3\n    }, {\n      name: \"Anna \",\n      status: \"Pretty girl\",\n      url: \"https://i.pravatar.cc/150?img=1\",\n      id: 4\n    }];\n  }\n  getGroupName() {\n    return this.groupName;\n  }\n  updateGroupName(newGroupName) {\n    this.groupName = newGroupName;\n  }\n  getUsers() {\n    return this.users;\n  }\n  setViewRef(viewRef) {\n    this.viewRef = viewRef;\n  }\n  showPopUp() {\n    const factory = this.componentFactoryResolver.resolveComponentFactory(PopUpComponent);\n    this.componentRef = factory.create(this.viewRef.injector);\n    this.componentRef.instance.members = this.users.length;\n    this.componentRef.instance.name = this.getGroupName();\n    this.componentRef.instance.close.subscribe(() => {\n      this.viewRef.clear();\n    });\n    this.viewRef.insert(this.componentRef.hostView);\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i0.ComponentFactoryResolver));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,cAAc,QAAQ,4BAA4B;;AAK3D,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,wBAAkD;IAAlD,6BAAwB,GAAxBA,wBAAwB;IAJpC,cAAS,GAAW,mBAAmB;IAc/C,UAAK,GAAG,CACN;MAACC,IAAI,EAAE,MAAM;MAAEC,MAAM,EAAE,sBAAsB;MAAEC,GAAG,EAAE,kCAAkC;MAAEC,EAAE,EAAC;IAAC,CAAE,EAC9F;MAACH,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE,eAAe;MAAEC,GAAG,EAAE,iCAAiC;MAAEC,EAAE,EAAC;IAAC,CAAE,EACxF;MAACH,IAAI,EAAE,KAAK;MAAEC,MAAM,EAAE,2BAA2B;MAAEC,GAAG,EAAE,kCAAkC;MAAEC,EAAE,EAAC;IAAC,CAAE,EAClG;MAACH,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE,aAAa;MAAEC,GAAG,EAAE,iCAAiC;MAAEC,EAAE,EAAC;IAAC,CAAE,CACtF;EAfyE;EAE1EC,YAAY;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,eAAe,CAACC,YAAoB;IAClC,IAAI,CAACF,SAAS,GAAGE,YAAY;EAC/B;EASAC,QAAQ;IACN,OAAO,IAAI,CAACC,KAAK;EACnB;EAEAC,UAAU,CAACC,OAAyB;IAClC,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEAC,SAAS;IACP,MAAMC,OAAO,GAAG,IAAI,CAACd,wBAAwB,CAACe,uBAAuB,CAAClB,cAAc,CAAC;IACrF,IAAI,CAACmB,YAAY,GAAGF,OAAO,CAACG,MAAM,CAAC,IAAI,CAACL,OAAO,CAACM,QAAQ,CAAC;IACzD,IAAI,CAACF,YAAY,CAACG,QAAQ,CAACC,OAAO,GAAG,IAAI,CAACV,KAAK,CAACW,MAAM;IACtD,IAAI,CAACL,YAAY,CAACG,QAAQ,CAAClB,IAAI,GAAG,IAAI,CAACI,YAAY,EAAE;IACrD,IAAI,CAACW,YAAY,CAACG,QAAQ,CAACG,KAAK,CAACC,SAAS,CAAC,MAAK;MAC9C,IAAI,CAACX,OAAO,CAACY,KAAK,EAAE;IACtB,CAAC,CAAC;IACF,IAAI,CAACZ,OAAO,CAACa,MAAM,CAAC,IAAI,CAACT,YAAY,CAACU,QAAQ,CAAC;EACjD;;AAvCW5B,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAA6B,YAFX;AAAM","names":["PopUpComponent","UsersService","constructor","componentFactoryResolver","name","status","url","id","getGroupName","groupName","updateGroupName","newGroupName","getUsers","users","setViewRef","viewRef","showPopUp","factory","resolveComponentFactory","componentRef","create","injector","instance","members","length","close","subscribe","clear","insert","hostView","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lukac\\OneDrive\\Рабочий стол\\ДЗ\\HW 54 Work with network\\src\\app\\service\\users.service.ts"],"sourcesContent":["import { Injectable, ComponentFactoryResolver, ViewContainerRef, ComponentRef } from '@angular/core';\nimport { PopUpComponent } from '../pop-up/pop-up.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  private groupName: string = 'Healthy lifestyle';\n  private viewRef!: ViewContainerRef;\n  private componentRef!: ComponentRef<PopUpComponent>;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  getGroupName(): string {\n    return this.groupName;\n  }\n\n  updateGroupName(newGroupName: string): void {\n    this.groupName = newGroupName;\n  }\n\n  users = [\n    {name: \"Mike\", status: \"I'm learning angular\", url: \"https://i.pravatar.cc/150?img=12\", id:1,},\n    {name: \"Nikola\", status: \"Playing piano\", url: \"https://i.pravatar.cc/150?img=7\", id:2,},\n    {name: \"Bob\", status: \"Translations from Chinese\", url: \"https://i.pravatar.cc/150?img=11\", id:3,},\n    {name: \"Anna \", status: \"Pretty girl\", url: \"https://i.pravatar.cc/150?img=1\", id:4,},\n  ];\n\n  getUsers() {\n    return this.users;\n  }\n\n  setViewRef(viewRef: ViewContainerRef) {\n    this.viewRef = viewRef;\n  }\n\n  showPopUp() {\n    const factory = this.componentFactoryResolver.resolveComponentFactory(PopUpComponent);\n    this.componentRef = factory.create(this.viewRef.injector);\n    this.componentRef.instance.members = this.users.length;\n    this.componentRef.instance.name = this.getGroupName();\n    this.componentRef.instance.close.subscribe(() => {\n      this.viewRef.clear();\n    });\n    this.viewRef.insert(this.componentRef.hostView);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}